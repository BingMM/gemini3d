name: ci

env:
  CTEST_PARALLEL_LEVEL: 0
  HOMEBREW_NO_INSTALL_CLEANUP: 1
  CTEST_NO_TESTS_ACTION: error
  CMAKE_BUILD_PARALLEL_LEVEL: 4

on:
  push:
    paths:
      - "**.c"
      - "**.cpp"
      - "**.f90"
      - "**.F90"
      - "**.cmake"
      - "**/CMakeLists.txt"
      - "CMakePresets.json"
      - "cmake/libraries.json"
      - "!cmake/intel.cmake"
      - ".github/workflows/ci.yml"
# paths ignore starting with "!"
      - "!docs/**"
      - "!**/cray.cmake"


jobs:

  core:
    timeout-minutes: 30

    strategy:
      matrix:
        hwm14: [false]
        os: [ubuntu-latest]
        gcc: [9,10,11,12,13]
# glitch with ffilesystem GA macOS not detecting HAVE_CXX_FILESYSTEM never seen on real computers
        # include:
        # - os: macos-latest
        #   gcc: 13
        include:
        - os: ubuntu-20.04
          gcc: 8

    env:
      CC: gcc-${{ matrix.gcc }}
      CXX: g++-${{ matrix.gcc }}
      FC: gfortran-${{ matrix.gcc }}

    runs-on: ${{ matrix.os }}

    steps:

    - name: Install packages (Linux)
      if: runner.os == 'Linux'
      timeout-minutes: 15
      run: |
        sudo apt update
        sudo apt install --no-install-recommends libopenmpi-dev openmpi-bin libhdf5-dev ninja-build

    - name: Install GCC-8 (Ubuntu 20.04)
      if: matrix.os == 'ubuntu-20.04'
      timeout-minutes: 15
      run: sudo apt install gcc-8 g++-8 gfortran-8
# don't install libscalapack-openmpi-dev, it is broken CMake package
# don't remove sudo apt update or every once in a while all the jobs will fail when the GA runner
# is out of sync with the upstream Ubuntu package repos

    - name: Install packages (MacOS)
      if: runner.os == 'macOS'
      timeout-minutes: 15
      run: brew install ninja open-mpi hdf5 scalapack

    - uses: actions/checkout@v4

    - name: Configure multi
      run: cmake --preset multi -Dhwm14:BOOL=${{ matrix.hwm14 }}

    - name: print config log
      if: ${{ failure() }}
      run: cat build/CMakeFiles/CMakeConfigureLog.yaml

    - name: Debug build
      run: cmake --build --preset debug

    - name: Debug unit test
      run: ctest --preset debug -L unit

    # - name: Debug core test
    #   run: ctest --preset debug -LE unit -R "(2dew_.*fang|2dns_.*fang)"


    - name: Release build
      run: cmake --build --preset release

    - name: Release unit test
      run: ctest --preset release -L unit

    # # - name: Release core test
    # #   run: ctest --preset release -LE unit -E 3d
